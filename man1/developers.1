.\" Generated with Ronnjs/v0.1
.\" http://github.com/kapouer/ronnjs/
.
.TH "NPM\-DEVELOPERS" "1" "November 2010" "" ""
.
.SH "NAME"
\fBnpm-developers\fR \-\- Developer Guide
.
.SH "DESCRIPTION"
So, you\'ve decided to use npm to publish your project\.
.
.P
Fantastic!
.
.P
There are a few things that you need to do above the simple steps
that your users will do to install your program\.
.
.SH "About These Documents"
These are man pages\.  If you install npm, you should be able to
then do \fBman npm\-thing\fR to get the documentation on a particular
topic\.
.
.P
Any time you see "see npm\-whatever(1)", you can do \fBman npm\-whatever\fR
to get at the docs\.
.
.SH "The package\.json File"
You need to have a \fBpackage\.json\fR file in the root of your project\.
.
.P
See npm\-json(1) for details about what goes in that file\.  At the very
least, you need:
.
.IP "\(bu" 4
name:
This should be a string that identifies your project\.  Please do not
use the name to specify that it runs on node, or is in JavaScript\.
You can use the "engines" field to explicitly state the versions of
node (or whatever else) that your program requires, and it\'s pretty
well assumed that it\'s javascript\.
.
.IP
It does not necessarily need to match your github repository name\.
.
.IP
So, \fBnode\-foo\fR and \fBbar\-js\fR are bad names\.  \fBfoo\fR or \fBbar\fR are better\.
.
.IP "\(bu" 4
version:
A semver\-compatible version\.
.
.IP "\(bu" 4
engines:
Specify the versions of node (or whatever else) that your program
runs on\.  The node API changes a lot, and there may be bugs or new
functionality that you depend on\.  Be explicit\.
.
.IP "\(bu" 4
author:
Take some credit\.
.
.IP "\(bu" 4
scripts:
If you have a special compilation or installation script, then you
should put it in the \fBscripts\fR hash\.  See npm\-scripts(1)\.
.
.IP "\(bu" 4
main:
If you have a single module that serves as the entry point to your
program (like what the "foo" package gives you at require("foo")),
then you need to specify that in the "main" field\.
.
.IP "" 0
.
.SH "Make Sure Your Package Installs and Works"
\fBThis is important\.\fR
.
.P
If you can not install it locally, you\'ll have 
problems trying to publish it\.  Or, worse yet, you\'ll be able to
publish it, but you\'ll be publishing a broken or pointless package\.
So don\'t do that\.
.
.P
In the root of your package, do this:
.
.IP "" 4
.
.nf
npm install \.
.
.fi
.
.IP "" 0
.
.P
That\'ll show you that it\'s working\.  If you\'d rather just create a symlink
package that points to your working directory, then do this:
.
.IP "" 4
.
.nf
npm link \.
.
.fi
.
.IP "" 0
.
.P
Use \fBnpm ls installed\fR to see if it\'s there\.
.
.P
Then go into the node\-repl, and try using require() to bring in your module\'s
main and libs things\.  Assuming that you have a package like this:
.
.IP "" 4
.
.nf
node_foo/
  lib/
    foo\.js
    bar\.js
.
.fi
.
.IP "" 0
.
.P
and you define your package\.json with this in it:
.
.IP "" 4
.
.nf
{ "name" : "foo"
, "directories" : { "lib" : "\./lib" }
, "main" : "\./lib/foo"
}
.
.fi
.
.IP "" 0
.
.P
then you\'d want to make sure that require("foo") and require("foo/bar") both
work and bring in the appropriate modules\.
.
.SH "Create a User Account"
Create a user with the adduser command\.  It works like this:
.
.IP "" 4
.
.nf
npm adduser
.
.fi
.
.IP "" 0
.
.P
and then follow the prompts\.
.
.P
This is documented better in npm\-adduser(1)\.  So do this to get the
details:
.
.IP "" 4
.
.nf
npm help adduser
.
.fi
.
.IP "" 0
.
.SH "Publish your package"
This part\'s easy\.
.
.IP "" 4
.
.nf
npm publish /path/to/my\-package
.
.fi
.
.IP "" 0
.
.P
You can give publish a url to a tarball, or a filename of a tarball,
or a path to a folder\.
.
.P
If you\'re in the root of your folder, then you can just do:
.
.IP "" 4
.
.nf
npm publish
.
.fi
.
.IP "" 0
.
.P
since the default argument is "\."\.
.
.SH "Brag about it"
Send emails, write blogs, blab in IRC\.
.
.P
Tell the world how easy it is to install your program!
