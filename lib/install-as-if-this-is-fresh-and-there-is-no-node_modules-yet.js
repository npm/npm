module.exports = freshinstall

freshinstall.usage = 'npm install-as-if-this-is-fresh-and-there-is-no-node_modules-yet [<pkg>...]'

var path = require('path')
var validate = require('aproba')
var log = require('npmlog')
var npm = require('./npm.js')
var Installer = require('./install.js').Installer
var inherits = require('inherits')

freshinstall.completion = npm.commands.install.completion

function freshinstall (where, args, cb) {
  if (!cb) {
    cb = args
    args = where
    where = null
  }
  var globalTop = path.resolve(npm.globalDir, '..')
  if (!where) {
    where = npm.config.get('global')
          ? globalTop
          : npm.prefix
  }
  validate('SAF', [where, args, cb])
  // the /path/to/node_modules/..
  var dryrun = !!npm.config.get('dry-run')

  if (npm.config.get('dev')) {
    log.warn('install', 'Usage of the `--dev` option is deprecated. Use `--only=dev` instead.')
  }

  if (where === globalTop && !args.length) {
    args = ['.']
  }
  args = args.filter(function (a) {
    return path.resolve(a) !== npm.prefix
  })

  new FreshInstaller(where, dryrun, args).run(cb)
}

function FreshInstaller (where, dryrun, args) {
  Installer.apply(this, arguments)
}

inherits(FreshInstaller, Installer)

FreshInstaller.prototype.cloneCurrentTreeToIdealTree = function (cb) {
  validate('F', arguments)
  log.silly('install', 'cloneCurrentTreeToIdealTree')
  this.idealTree = {
    package: this.currentTree.package,
    path: this.currentTree.path,
    realpath: this.currentTree.realpath,
    children: [],
    requires: [],
    missingDeps: {},
    missingDevDeps: {},
    requiredBy: [],
    error: this.currentTree.error,
    warnings: [],
    isTop: true
  }
  cb()
}
