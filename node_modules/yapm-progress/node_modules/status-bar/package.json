{
	"name": "status-bar",
	"version": "1.1.1",
	"description": "A status bar for file transfers",
	"keywords": ["status", "bar", "file", "transfer", "speed", "progress",
			"stream"],
	"author": {
		"name": "Gabriel Llamas",
		"email": "gagle@outlook.com"
	},
	"repository": {
		"type": "git",
		"url": "git://github.com/gagle/node-status-bar.git"
	},
	"engines": {
		"node": ">=0.10"
	},
	"dependencies": {
		"progress-bar-formatter": "1.0.x"
	},
	"license": "MIT",
	"main": "lib",
	"readme": "status-bar\r\n==========\r\n\r\n#### A status bar for file transfers ####\r\n\r\n[![NPM version](https://badge.fury.io/js/status-bar.png)](http://badge.fury.io/js/status-bar \"Fury Version Badge\")\r\n[![Dependency Status](https://david-dm.org/gagle/node-status-bar.png)](https://david-dm.org/gagle/node-status-bar \"David Dependency Manager Badge\")\r\n\r\n[![NPM installation](https://nodei.co/npm/status-bar.png?mini=true)](https://nodei.co/npm/status-bar \"NodeICO Badge\")\r\n\r\n#### Example ####\r\n\r\n```javascript\r\nvar statusBar = require (\"status-bar\");\r\n\r\nvar bar = statusBar.create ({\r\n  //Total file size\r\n  total: size,\r\n  //Render function\r\n  render: function (stats){\r\n    //Print the status bar as you like\r\n    process.stdout.write (filename + \" \" + \r\n        this.format.storage (stats.currentSize) + \" \" +\r\n        this.format.speed (stats.speed) + \" \" +\r\n        this.format.time (stats.remainingTime) + \" [\" +\r\n        this.format.progressBar (stats.percentage) + \"] \" +\r\n        this.format.percentage (stats.percentage));\r\n    process.stdout.cursorTo (0);\r\n  }\r\n});\r\n\r\n//Update the status bar when you send or receive a chunk of a file\r\nobj.on (\"some-event\", function (chunk){\r\n  //You can pass any object that contains a length property or a simple number\r\n  bar.update (chunk);\r\n});\r\n\r\n//Or simply pipe() things to it!\r\nstream.pipe (bar);\r\n\r\n//It will print something like this\r\n//a-file                  17.8 MiB   23.6M/s 00:13 [#·······················]   6%\r\n```\r\n\r\n#### Why you should try this module ####\r\n\r\n- It doesn't print anything, it just calculates and returns raw data and provides default formatting functions. Other modules similar to this force you to use their own formatting functions with the `readline` module, which is very unstable and may cause problems if you are already using a `readline` instance.\r\n- The status bar can be displayed wherever you want, it is simply a string, so you can render it in the console, in HTML (probably with your own progress bar) sending it via websockets or with [node-webkit](https://github.com/rogerwang/node-webkit), etc.\r\n- You decide how to format and arrange the elements. The default formatting functions have a fixed length, so you can format the status bar very easily.\r\n- It is very easy to use. Just `pipe()` things to it!\r\n\r\n#### Download example ####\r\n\r\n```javascript\r\nvar http = require (\"http\");\r\nvar statusBar = require (\"status-bar\");\r\n\r\nvar url = \"http://nodejs.org/dist/latest/node.exe\";\r\n\r\nhttp.get (url, function (res){\r\n  var bar = statusBar.create ({\r\n    total: res.headers[\"content-length\"],\r\n    render: function (stats){\r\n      process.stdout.write (\r\n          url + \" \" +\r\n          this.format.storage (stats.currentSize) + \" \" +\r\n          this.format.speed (stats.speed) + \" \" +\r\n          this.format.time (stats.remainingTime) + \" [\" +\r\n          this.format.progressBar (stats.percentage) + \"] \" +\r\n          this.format.percentage (stats.percentage));\r\n      process.stdout.cursorTo (0);\r\n    }\r\n  });\r\n  \r\n  res.pipe (bar);\r\n}).on (\"error\", function (error){\r\n  console.error (error);\r\n});\r\n```\r\n\r\nPrints something similar to this:\r\n\r\n```\r\nhttp://nodejs.org/dist/latest/node.exe    2.7 MiB  502.4K/s 00:07 [############············]  49%\r\n```\r\n\r\n#### Render function examples ####\r\n\r\n- `pacman` from Arch Linux:\r\n  \r\n  ```\r\n  a-file                  17.8 MiB   23.6M/s 00:13 [#·······················]   6%\r\n  ```\r\n\r\n  ```javascript\r\n  var statusBar = require (\"status-bar\");\r\n  \r\n  var formatFilename = function (filename){\r\n    //80 - 59\r\n    var filenameMaxLength = 21;\r\n    if (filename.length > filenameMaxLength){\r\n      filename = filename.slice (0, filenameMaxLength - 3) + \"...\";\r\n    }else{\r\n      var remaining = filenameMaxLength - filename.length;\r\n      while (remaining--){\r\n        filename += \" \";\r\n      }\r\n    }\r\n    return filename;\r\n  };\r\n  \r\n  filename = formatFilename (filename);\r\n  \r\n  var render = function (stats){\r\n    process.stdout.write (filename + \" \" + \r\n        this.format.storage (stats.currentSize) + \" \" +\r\n        this.format.speed (stats.speed) + \" \" +\r\n        this.format.time (stats.remainingTime) + \" [\" +\r\n        this.format.progressBar (stats.percentage) + \"] \" +\r\n        this.format.percentage (stats.percentage));\r\n    process.stdout.cursorTo (0);\r\n  };\r\n  \r\n  var bar = statusBar.create ({\r\n    total: ...,\r\n    render: render\r\n  });\r\n  ```\r\n\r\n- `git clone`:\r\n  \r\n  ```\r\n  Receiving objects: 18% (56655992/311833402), 54.0 MiB | 26.7M/s\r\n  ```\r\n\r\n  ```javascript\r\n  var statusBar = require (\"status-bar\");\r\n  \r\n  var render = function (stats){\r\n    process.stdout.write (\"Receiving objects: \" +\r\n        this.format.percentage (stats.percentage).trim () +\r\n        \" (\" + stats.currentSize + \"/\" + stats.totalSize + \"), \" +\r\n        this.format.storage (stats.currentSize).trim () + \" | \" +\r\n        this.format.speed (stats.speed).trim ());\r\n    process.stdout.cursorTo (0);\r\n  };\r\n  \r\n  \r\n  var bar = statusBar.create ({\r\n    total: ...,\r\n    render: render\r\n  });\r\n  ```\r\n\r\n#### Functions ####\r\n\r\n- [_module_.create(options) : StatusBar](#create)\r\n\r\n#### Objects ####\r\n\r\n- [StatusBar](#statusbar_object)\r\n\r\n---\r\n\r\n<a name=\"create\"><\/a>\r\n___module_.create(options) : StatusBar__\r\n\r\nReturns a new [StatusBar](#statusbar_object) instance.\r\n\r\nOptions:\r\n\r\n- __finish__ - _Function_  \r\n\tFunction that is called when the file transfer has finished.\r\n- __frequency__ - _Number_  \r\n  The rendering frequency in milliseconds. It must be a positive value. Default is 200.\r\n- __progressBarComplete__ - _String_  \r\n  The character that shows completion progress. Default is `#`.\r\n- __progressBarIncomplete__ - _String_  \r\n  The character that shows the remaining progress. Default is `·`.\r\n- __progressBarLength__ - _Number_  \r\n  The length of the progress bar. Default is 24.\r\n- __render__ - _Function_  \r\n\tFunction that is called when the status bar needs to be printed. It is required. It receives the stats object as an argument. All of its properties contain raw data, so you need to format them. You can use the default formatting functions.\r\n\r\n  Stats:\r\n  \r\n  - __currentSize__ - _Number_  \r\n  The current size in bytes.\r\n  - __remainingSize__ - _Number_  \r\n  The remaining size in bytes.\r\n  - __totalSize__ - _Number_  \r\n  The total size in bytes.\r\n  - __percentage__ - _Number_  \r\n  The complete percentage. A number between 0 and 1.\r\n  - __speed__ - _Number_  \r\n  The estimated current speed in bytes per second.\r\n  - __elapsedTime__ - _Number_  \r\n  The elapsed time in seconds.\r\n  - __remainingTime__ - _Number_  \r\n  The estimated remaining time in seconds. If the remaining time cannot be estimated because the status bar needs at least 2 chunks or because the transfer it's hung up, it returns `undefined`.\r\n  \r\n- __total__ - _Number_  \r\n  The total size of the file. This option is required.\r\n\r\n---\r\n\r\n<a name=\"statusbar_object\"><\/a>\r\n__StatusBar__\r\n\r\n__Methods__\r\n\r\n- [StatusBar#cancel() : undefined](#statusbar_cancel)\r\n- [StatusBar#update(chunk) : undefined](#statusbar_update)\r\n\r\n__Properties__\r\n\r\n- [StatusBar#format : Formatter](#statusbar_format)\r\n\r\n---\r\n\r\n<a name=\"statusbar_cancel\"><\/a>\r\n__StatusBar#cancel() : undefined__\r\n\r\nWhen you need to cancel the rendering of the status bar because the transfer has been aborted due to an error or any other reason, call to this function to clear the timer.\r\n\r\n---\r\n\r\n<a name=\"statusbar_format\"><\/a>\r\n__StatusBar#format : Formatter__\r\n\r\nReturns a [Formatter](#formatter) instance.\r\n\r\n---\r\n\r\n<a name=\"statusbar_update\"><\/a>\r\n__StatusBar#update(chunk) : undefined__\r\n\r\nUpdates the status bar. The `chunk` can be any object with a length property or a simple number.\r\n\r\n---\r\n\r\n<a name=\"formatter\"><\/a>\r\n__Formatter__\r\n\r\n__Methods__\r\n\r\n- [Formatter#percentage(percentage) : String](#formatter-percentage)\r\n- [Formatter#progressBar(percentage) : String](#formatter-progressBar)\r\n- [Formatter#speed(bytesPerSecond) : String](#formatter-speed)\r\n- [Formatter#storage(bytes) : String](#formatter-storage)\r\n- [Formatter#time(seconds) : String](#formatter-time)\r\n\r\n---\r\n\r\n<a name=\"formatter-percentage\"><\/a>\r\n__Formatter#percentage(percentage) : String__\r\n\r\nThe percentage must be a number between 0 and 1. Result string length: 4.\r\n\r\n```javascript\r\nconsole.log (this.format.percentage (0.5));\r\n// 50%\r\n```\r\n\r\n---\r\n\r\n<a name=\"formatter-progressbar\"><\/a>\r\n__Formatter#progressBar(percentage) : String__\r\n\r\nThe percentage must be a number between 0 and 1. Result string length: the length configured with the option `progressBarLength`.\r\n\r\n```javascript\r\nconsole.log (this.format.progressBar (0.06));\r\n//#·······················\r\n```\r\n\r\n---\r\n\r\n<a name=\"formatter-speed\"><\/a>\r\n__Formatter#speed(bytesPerSecond) : String__\r\n\r\nSpeed in bytes per second. Result string length: 9.\r\n\r\n```javascript\r\nconsole.log (this.format.speed (30098226));\r\n//  30.1M/s\r\n```\r\n\r\n---\r\n\r\n<a name=\"formatter-storage\"><\/a>\r\n__Formatter#storage(bytes) : String__\r\n\r\nResult string length: 10.\r\n\r\n```javascript\r\nconsole.log (this.format.storage (38546744));\r\n//  36.8 MiB\r\n```\r\n\r\n---\r\n\r\n<a name=\"formatter-time\"><\/a>\r\n__Formatter#time(seconds) : String__\r\n\r\nResult string length: 5 (_min_:_sec_). If `seconds` is undefined it prints `--:--`.\r\n\r\n```javascript\r\nconsole.log (this.format.time (63));\r\n//01:03\r\n```",
	"readmeFilename": "README.md",
	"bugs": {
		"url": "https://github.com/gagle/node-status-bar/issues"
	},
	"homepage": "https://github.com/gagle/node-status-bar",
	"_id": "status-bar@1.1.1",
	"_shasum": "6d0fcd21cd5b9461263c4f8644cd65b5207ebe67",
	"_from": "status-bar@1.x",
	"_resolved": "https://registry.npmjs.org/status-bar/-/status-bar-1.1.1.tgz"
}
