module.exports = adduser

var crypto = require('crypto')

function sha (s) {
  return crypto.createHash("sha1").update(s).digest("hex")
}

function adduser (username, password, email, couch, cb) {

  password = ("" + (password || "")).trim()
  if (!password) return cb(new Error("No password supplied."))

  email = ("" + (email || "")).trim()
  if (!email) return cb(new Error("No email address supplied."))
  if (!email.match(/^[^@]+@[^\.]+\.[^\.]+/)) {
    return cb(new Error("Please use a real email address."))
  }

  if (password.indexOf(":") !== -1) return cb(new Error(
    "Sorry, ':' chars are not allowed in passwords.\n"+
    "See <https://issues.apache.org/jira/browse/COUCHDB-969> for why."))

  var defaultRolesString = this.conf.get("defaultRoles")
    , defaultRoles = (defaultRolesString)? defaultRolesString.split(','):[]

  var salt = crypto.randomBytes(30).toString('hex')
    , userobj =
      { name : username
      , salt : salt
      , password_sha : sha(password + salt)
      , email : email
      , _id : 'org.couchdb.user:'+username
      , type : "user"
      , roles : defaultRoles  
      , date: new Date().toISOString()
      }

  // pluck off any other username/password/token.  it needs to be the
  // same as the user we're becoming now.  replace them on error.
  var pre = { username: this.conf.get('username')
            , password: this.conf.get('_password')
            , auth: this.conf.get('_auth')
            , token: this.conf.get('_token') }

  this.conf.del('_token')
  this.conf.del('username')
  this.conf.del('_auth')
  this.conf.del('_password')
  if (this.couchLogin) {
    this.couchLogin.token = null
  }

  cb = done.call(this, cb, pre)

  var logObj = Object.keys(userobj).map(function (k) {
    if (k === 'salt' || k === 'password_sha') return [k, 'XXXXX']
    return [k, userobj[k]]
  }).reduce(function (s, kv) {
    s[kv[0]] = kv[1]
    return s
  }, {})

  this.log.verbose("adduser", "before couch login", logObj)

  var auth = {name : username, password : password}

  couch.login(auth, function (error, response, json) {

    // if we find a user we will get a 200, if not let us try to create one
    if (response && (response.statusCode === 401
            || response.statusCode === 200)) {
      this.log.verbose("response.statusCode ", response.statusCode)
      this.log.verbose("json-data ", JSON.stringify(json))
      // if we get a 401 we need to to create the user and we will stop
      if(response.statusCode === 401) {
        /* if the user db is passwd protected and we reach here we need to
         * check whether we are admin prior to be able to create new user
         * re-instate previous auth/token/etc.*/
        this.conf.set('_token', pre.token)
        if (this.couchLogin) {
          this.couchLogin.token = pre.token
          if (this.couchLogin.tokenSet) {
            this.couchLogin.tokenSet(pre.token)
          }
        }
        this.conf.set('username', pre.username)
        this.conf.set('_password', pre.password)
        this.conf.set('_auth', pre.auth)
        return this.request('PUT'
        , '/-/user/org.couchdb.user:'+encodeURIComponent(username)
        , userobj
        , cb)
      }
      // let us save the auth when we enter here
      var b = new Buffer(username + ":" + password)
      this.conf.set('_auth', b.toString("base64"))
      this.conf.set('username', username)
      this.conf.set('_password', password)
      this.conf.save("user")
      // if we reach here we have are done
      return this.request('GET'
        , '/-/user/org.couchdb.user:'+encodeURIComponent(username)
        , cb)
    } else {
      return cb(error, json, json, response)
    }
  }.bind(this))

}

function done (cb, pre) {
  return function (error, data, json, response) {
    if (!error &&
     (!response || response.statusCode === 201|| response.statusCode === 200)) {
      return cb(error, data, json, response)
    }

    // there was some kind of error, re-instate previous auth/token/etc.
    this.conf.set('_token', pre.token)
    if (this.couchLogin) {
      this.couchLogin.token = pre.token
      if (this.couchLogin.tokenSet) {
        this.couchLogin.tokenSet(pre.token)
      }
    }
    this.conf.set('username', pre.username)
    this.conf.set('_password', pre.password)
    this.conf.set('_auth', pre.auth)

    this.log.verbose("adduser", "back", [error, data, json])
    if (!error) {
      error = new Error( (response && response.statusCode || "") + " "+
      "Could not create user\n"+JSON.stringify(data))
    }
    if (response
        && (response.statusCode === 401 || response.statusCode === 403)) {
      this.log.warn("adduser", "Incorrect username or password\n\n"
              +"You can reset your account by visiting:\n"
              +"\n"
              +"    https://admin.npmjs.org/reset\n")
    } else if (response
        && response.statusCode === 404) {
      this.log.warn("adduser", "Insufficient rights to add the user\n\n"
              +"You need to become or contact the admin " 
              +"of the private registry to create your account\n"
              +"public registry visit:\n\n"
              +"    https://npmjs.org/signup\n")
    }

    return cb(error)
  }.bind(this)
}
